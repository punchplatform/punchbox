---
platform:
  platform_id: {{ settings.platform.id }}
  setups_root: {{ settings.platform.setups_root }}
  remote_data_root_directory: {{ settings.platform.data_root }}
  remote_logs_root_directory: {{ settings.platform.logs_root }}
  punchplatform_daemons_user: {{ settings.platform.punch_daemons_user }}
  punchplatform_group: {{ settings.platform.punch_daemons_group }}
  binaries_version: {{ topology.versions.binaries }}

{% if settings.reporters %}
reporters:
  {{ settings.reporters }}
{% endif %}

{% if topology.users %}
punchplatform_operator:
  punchplatform_operator_environment_version: {{ topology.versions.operator }}
  configuration_name_dir_from_home: {{ settings.punchplatform_operator.configuration_name_dir_from_home }}
  reporters: {{ settings.punchplatform_operator.reporters }}
  operators_username: {{ settings.punchplatform_operator.operators_username }}
  storage:  {{ settings.punchplatform_operator.storage }}
  servers:
    {% for host, item in topology.users.items() %}
    {{ host }}: {{ item }}
    {% endfor %}
{% endif %}


{% if topology.services.zookeeper %}
zookeeper:
  zookeeper_version: {{ topology.versions.zookeeper }}
  zookeeper_nodes_production_interface: {{ topology.network.production_interface }}
  zookeeper_childopts: {{ settings.zookeeper.zookeeper_childopts }}
  clusters:
    {% for cluster, servers in topology.services.zookeeper.items() %}
    {{ cluster }}:
      hosts:
        {% for host, params in servers.items() %}
        - {{host }}
        {% endfor %}
      cluster_port: {{ settings.zookeeper.get(cluster).cluster_port }}
      punchplatform_root_node: {{ settings.zookeeper.get(cluster).punchplatform_root_node }}
      servers:
      {% for server in servers %}
        {{ server }}: {}
      {% endfor %}
    {% endfor %}
{% endif %}

{% if topology.services.kafka %}
kafka:
  kafka_version: {{ topology.versions.kafka }}
  kafka_brokers_production_interface: {{ topology.network.production_interface }}
  clusters:
    {% for cluster, servers in topology.services.kafka.items() %}
    {{ cluster }}:
      brokers_with_ids:
      {% for host, params in servers.items() %}
      - id: {{ loop.index }}
        broker: {{ host }}:{{ settings.kafka.get(cluster).cluster_port }}
      {% endfor %}
      zk_cluster: {{ cluster }}
      zk_root: {{ settings.kafka.get(cluster).zk_root }}
      brokers_config: {{ settings.kafka.get(cluster).brokers_config }}
      default_replication_factor: {{ settings.kafka.get(cluster).default_replication_factor }}
      default_partitions: {{ settings.kafka.get(cluster).default_partitions }}
      partition_retention_bytes: {{ settings.kafka.get(cluster).partition_retention_bytes }}
      partition_retention_hours: {{ settings.kafka.get(cluster).partition_retention_hours }}
      kafka_brokers_jvm_xmx: {{ settings.kafka.get(cluster).kafka_brokers_jvm_xmx }}
    {% endfor %}
{% endif %}

{% if topology.services.elasticsearch %}
{% set esTopo = topology.services.elasticsearch %}
{% set esSettings = topology.services.elasticsearch %}
elasticsearch:
  elasticsearch_version: {{ topology.versions.elastic }}
  clusters:
    {% for esCluster, esClusterTopo in topology.services.elasticsearch.items() %}
    {% set esClusterSettings = settings.elasticsearch.get(cluster) %}
    {{ esCluster }}:
      nodes:
      {% for host, params in esClusterTopo.items() %}
      - {{ server }}
        "http_api_address" : {{  [ host , settings.network.get(esClusterSettings.http_interface).domain ] | join (".")  }}:{{ settings.elasticsearch.get(cluster).httpcluster_port }}
      {% endfor %}
      zk_cluster: {{ cluster }}
      zk_root: {{ settings.kafka.get(cluster).zk_root }}
      brokers_config: {{ settings.kafka.get(cluster).brokers_config }}
      default_replication_factor: {{ settings.kafka.get(cluster).default_replication_factor }}
      default_partitions: {{ settings.kafka.get(cluster).default_partitions }}
      partition_retention_bytes: {{ settings.kafka.get(cluster).partition_retention_bytes }}
      partition_retention_hours: {{ settings.kafka.get(cluster).partition_retention_hours }}
      kafka_brokers_jvm_xmx: {{ settings.kafka.get(cluster).kafka_brokers_jvm_xmx }}
    {% endfor %}
{% endif %}

{% if topology.services.shiva is defined %}
shiva:
  shiva_version: {{ topology.versions.shiva }}
  clusters:
  {% for cluster, servers in topology.services.shiva.items() %}
    {{ cluster }}:
      storage: {{ settings.shiva.get(cluster).storage }}
      reporters: {{ settings.shiva.get(cluster).reporters }}
      servers:
      {% for host, params in servers.items() %}
        {{ host }}:
          {{ params }}
      {% endfor %}
  {% endfor %}
{% endif %}

