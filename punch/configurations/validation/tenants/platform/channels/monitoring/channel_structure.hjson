{
  version: "6.0"
  start_by_tenant: true
  stop_by_tenant: true

  /*  This channel handles central site monitoring, composed of :

  		- platform health service for the site
  		- dispatching of logs and events collected from the site components (shiva logs, punchline metrics, operator events...) 
  		from the central reporter kafka topic to the Monitoring Elasticsearch various indices.
		- channels monitoring for the platform channels

      This is a reference configuration item developed for DAVE 6.1 release - 31/08/2020 by CVF

  */

  applications: [
	{
		name: platform_health
		runtime: shiva
		/* 	This is a monitoring service, so we run it in the processing_shiva, because the other shiva (the front cluster) 
			would not have access to all instances of the services  (network isolation/firewalling is the main reason to have a separate front tier).
		*/
		cluster: common
		// platform-monitoring is a builtin punchplatform micro-service, automatically available on shiva runner nodes
		command: platform-monitoring
		// The only needed argument is the service configuration file
		args: [ "platform_health.json" ]
      }

      {
      	/* This is a punchline in charge of reading events and logs from the central reporter kafka topic 
      		and of sending them to appropriate various elasticsearch indices.
      	   Note that associated kafka topic is listed in the 'resources' section.
      	*/
		name: local_events_dispatcher 
		runtime: shiva
		cluster: common
		/*	As for all punchline running on shiva, the actual command that shiva is using is 'punchlinectl', 
			which is the same a user would use on a common node to start a punchline manually.
			The command is automatically available on shiva runner nodes.
		*/
	    	command: punchlinectl
		args: [  "start", "--punchline", "local_events_dispatcher.hjson"]
	}

      {
      	/* This is a punchline in charge of reading events and logs from the central reporter kafka topic 
      		and of sending them to appropriate various elasticsearch indices.
      	   Note that associated kafka topic is listed in the 'resources' section.
      	*/
		name: channels_monitoring 
		runtime: shiva
		cluster: common
		/*	As for all punchline running on shiva, the actual command that shiva is using is 'punchlinectl', 
			which is the same a user would use on a common node to start a punchline manually.
			The command is automatically available on shiva runner nodes.
		*/
	    	command: channels-monitoring
		args: [  "channels_monitoring.json"]
	}
	]
	

	/*  Here we describe kafka topic resource, that are needed for proper working of the channels application.
		Here, the required kafka topic will be created automatically
            by 'channelctl' at start of channel, if it does not already exist
      */

	resources: [
	    {
                type: kafka_topic
                name: platform-events
                // This is the kafka cluster id in which the topic will be created (it must match what is used in the punchline itself)
                cluster: common
                /* The following settings are used only when creating the topic if it does not exist.
                		These settings will not be changed if the topic already exists (it would require a human administration action
                		using kafka administration tools to alter these characteristics, because it involves allocating/deleting data storage)

                	Here, only 1 partition is required (i.e. we do not expect a performance or scalability constraints for the monitoring topic, 
                	because kafka is normally able to handle the events and logs of a platform with a single partition.)

			Replication factor is set to 2 (original + 1 copy) so that we avoid losing important events in case of kafka incident 
			(e.g. we want to keep the audit trail events of operator start/stop actions).
		    */
                partitions: 1
                replication_factor: 1
	    }
	]


}
